/*
 * main.c
 *
 *  Created on: Mar 23, 2025
 *      Author: Dell
 */
#include "main.h"
#include"stdio.h"
#define GPIOD_BASE_ADDR  0x40020C00
#define GPIOA_BASE_ADDR  0x40020000
#define RCC_BASE_ADDR    0x40023800
#define EXTI_BASE_ADDR    0x40013C00
#define SYSCFG_BASE_ADDR  0x40013800
#define NVIC_ISER0        ((volatile uint32_t*)0xE000E100)  // Interrupt Set-Enable Register
#define UART1_BASE_ADDR 0x40011000
#define GPIOB_BASE_ADDR 0x40020400
uint32_t* RCC_AHB1ENR  = (uint32_t*)(RCC_BASE_ADDR + 0x30);
uint32_t* RCC_APB2ENR  = (uint32_t*)(RCC_BASE_ADDR + 0x44);
uint32_t* GPIOD_MODER  = (uint32_t*)(GPIOD_BASE_ADDR + 0x00);
uint32_t* GPIOD_BSRR   = (uint32_t*)(GPIOD_BASE_ADDR + 0x18);
uint32_t* GPIOA_IDR    = (uint32_t*)(GPIOA_BASE_ADDR + 0x10);
uint32_t* GPIOA_PUPDR  = (uint32_t*)(GPIOA_BASE_ADDR + 0x0C);
uint32_t* GPIOA_MODER  = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
uint32_t* GPIOD_ODR    = (uint32_t*)(GPIOA_BASE_ADDR + 0x014);
uint8_t   led_state    = 0;

// Thanh ghi EXTI
uint32_t* EXTI_IMR  = (uint32_t*)(EXTI_BASE_ADDR + 0x00);
uint32_t* EXTI_RTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x08);
uint32_t* EXTI_FTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x0C);
uint32_t* EXTI_PR   = (uint32_t*)(EXTI_BASE_ADDR + 0x14);

// SYSCFG
uint32_t* SYSCFG_EXTICR1 = (uint32_t*)(SYSCFG_BASE_ADDR + 0x08);

typedef enum
{
	Green_LED  =12,
	Yellow_LED =13,
	Red_LED    =14,
	Blue_LED   =15,
}
LED_t;

void LedCtrl(LED_t led, int LED_stt)
{
#if 0
	if (LED_stt ==1)
	{
		*GPIOD_ODR |=(1<<12);
	else
		*GPIOD_ODR |=(1<<12)
	}
#else
	if (LED_stt ==1)
	{
		*GPIOD_BSRR|=(1<<led);
	}
	else
	{
		*GPIOD_BSRR=(1<<(led+16));
	}
#endif
}


void LedInit()
{

	__HAL_RCC_GPIOD_CLK_ENABLE();
	uint32_t* GPIOD_MODER = (uint32_t*)(GPIOD_BASE_ADDR + 0x00);
	*GPIOD_MODER &= ~(0xff << 24);
	*GPIOD_MODER |=  (0b01 << 24);        // PD12 output
	*GPIOD_MODER |=  (0b01 << (28));  // PD14 output
}



void ButtonInit()
{
	*RCC_AHB1ENR  |= (1 << 0);   // GPIOA
	*RCC_APB2ENR  |= (1 << 14);  // SYSCFG

	*GPIOA_MODER &= ~(0b11 << 0);
    *GPIOA_PUPDR &= ~(0b11 << 0);  // Xóa cấu hình cũ của Pull-up/Pull-down
    *GPIOA_PUPDR |=  (0b10 << 0);  // Kích hoạt Pull-down (01)


    SYSCFG->EXTICR[0] &= ~(0xF << 0); //chon ngat pa0

    //ngat 2 canh
    EXTI->IMR  |= (1 << 0);
    EXTI->RTSR |= (1 << 0);  // Rising edge
    EXTI->FTSR |= (1 << 0);  // Falling edge

    //cho phep NVIC nhan ngat tu pa0
    *NVIC_ISER0 |= (1 << 6);
}


// Hàm xử lý ngắt EXTI0
void EXTI0_IRQHandler(void)
{
	if (*EXTI_PR & (1 << 0))
	{
		*EXTI_PR |= (1 << 0);  // Clear pending

		if (*GPIOA_IDR & (1 << 0))
			LedCtrl(Red_LED, 1);
		else
			LedCtrl(Red_LED, 0);
	}
}
void UART1_Init()
{
	__HAL_RCC_GPIOB_CLK_ENABLE();
	uint32_t GPIOB_MODER = (uint32_t*)(GPIOB_BASE_ADDR + 0X00);
	*GPIOB_MODER &=(0b1111<12);
	*GPIOB_MODER |=(0b10<<12)|(0b10<<14);
	uint32_t* GPIOB_AFLR = (uint32_t)(GPIOB_BASE_ADDR+0x20);
	*GPIOB_AFLR &=~(0xff<24);
	*GPIOB_AFLR |=(0b0111<<24)|(0b0111<<28);
	__HAL_RCC_USART1_CLK_ENABLE(); //16MHz
	uint32_t* BRR = (uint32_t*)(UART1_BASE_ADDR+0x08);
	*BRR = (104<<4)|(3<<0);
	uint32_t* CR1 = (uint32_t*)(UART1_BASE_ADDR+0x0C);
	*CR1 |= (1<<12)|(1<<10)|(1<<2)|(1<<13);
}

void UART_Transmit(uint8_t data)
{
	uint32_t* DR = (uint32_t*)(UART1_BASE_ADD+0x04);
	uint32_t* SR = (uint32_t*)(UART1_BASE_ADD+0x00);
	while (((*SR>>7)&1)==0);
	*DR |= (1<<12)|(1<<10)|(1<<2)|(1<<13);
	while (((*SR>>6)&1)==0);

}
int main(void)
{
	HAL_Init();
	LedInit();
	ButtonInit();
	UART1_Init();
	while (1)
	{
		UART_Transmit(a);
		LedCtrl(Green_LED, 1);
		HAL_Delay(1000);
		LedCtrl(Green_LED, 0);
		HAL_Delay(1000);
	}
}
