/*
 * main.c
 *
 *  Created on: Mar 23, 2025
 *      Author: Dell
 */
#include "main.h"
#include"stdio.h"
#define GPIOD_BASE_ADDR  0x40020C00
#define GPIOA_BASE_ADDR  0x40020000
#define RCC_BASE_ADDR    0x40023800
#define EXTI_BASE_ADDR    0x40013C00
#define SYSCFG_BASE_ADDR  0x40013800
uint32_t* RCC_AHB1ENR  = (uint32_t*)(RCC_BASE_ADDR + 0x30);
uint32_t* RCC_APB2ENR  = (uint32_t*)(RCC_BASE_ADDR + 0x44);
uint32_t* GPIOD_MODER  = (uint32_t*)(GPIOD_BASE_ADDR + 0x00);
uint32_t* GPIOD_BSRR   = (uint32_t*)(GPIOD_BASE_ADDR + 0x18);
uint32_t* GPIOA_IDR    = (uint32_t*)(GPIOA_BASE_ADDR + 0x10);
uint32_t* GPIOA_PUPDR  = (uint32_t*)(GPIOA_BASE_ADDR + 0x0C);
uint32_t* GPIOD_ODR    = (uint32_t*)(GPIOA_BASE_ADDR + 0x014);
uint8_t   led_state    = 0;

// Thanh ghi EXTI
volatile uint32_t* const EXTI_IMR  = (uint32_t*)(EXTI_BASE_ADDR + 0x00);
volatile uint32_t* const EXTI_RTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x08);
volatile uint32_t* const EXTI_FTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x0C);
volatile uint32_t* const EXTI_PR   = (uint32_t*)(EXTI_BASE_ADDR + 0x14);

// SYSCFG
volatile uint32_t* const SYSCFG_EXTICR1 = (uint32_t*)(SYSCFG_BASE_ADDR + 0x08);

void LedInit()
{
	__HAL_RCC_GPIOD_CLK_ENABLE();
	uint32_t* GPIOD_MODER = (uint32_t*)(GPIOD_BASE_ADDR + 0x00);
	*GPIOD_MODER &= ~(0xff << 24);
	*GPIOD_MODER |=  (0b01 << 24);        // PD12 output
	*GPIOD_MODER |=  (0b01 << (2 * 14));  // PD14 output
}


void ButtonInit()
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
	uint32_t* GPIOA_MODER = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
	*GPIOA_MODER &= ~(0b11 << 0);
    *GPIOA_PUPDR &= ~(0b11 << 0);  // Xóa cấu hình cũ của Pull-up/Pull-down
    *GPIOA_PUPDR |=  (0b10 << 0);  // Kích hoạt Pull-down (01)

    RCC->APB2ENR |= (1 << 14); //clock syscfg
    SYSCFG->EXTICR[0] &= ~(0xF << 0); //chon ngat pa0

    //ngat 2 canh
    EXTI->IMR  |= (1 << 0);
    EXTI->RTSR |= (1 << 0);  // Rising edge
    EXTI->FTSR |= (1 << 0);  // Falling edge

    //cho phep NVIC nhan ngat tu pa0
    NVIC_EnableIRQ(EXTI0_IRQn);
    NVIC_SetPriority(EXTI0_IRQn, 1);
}


uint8_t ButtonRead()
{
    if (*GPIOA_IDR & (1 << 0))  // Kiểm tra bit 0 của GPIOA_IDR
    {
        return 1;  // PA0 ở mức cao (Không nhấn)
    }
    else
    {
        return 0;  // PA0 ở mức thấp (Nhấn)
    }
}
typedef enum
{
	Green_LED  =12,
	Yellow_LED =13,
	Red_LED    =14,
	Blue_LED   =15,

}
LED_t;
void LedCtrl(LED_t led, int LED_stt)
{
#if 0
	if (LED_stt ==1)
	{
		*GPIOD_ODR |=(1<<12);
	else
		*GPIOD_ODR |=(1<<12)
	}
#else
	if (LED_stt ==1)
	{
		*GPIOD_BSRR|=(1<<led);
	}
	else
	{
		*GPIOD_BSRR=(1<<(led+16));
	}
#endif
}

void Blink_Green_LED()
{
	LedCtrl(Green_LED, 1);
	HAL_Delay(1000);
	LedCtrl(Green_LED, 0);
	HAL_Delay(1000);
}

char BT_State()
{
	return (*GPIOA_IDR<<0)&1;
}
// Hàm xử lý ngắt EXTI0
void EXTI0_IRQHandler(void)
{
	if (*EXTI_PR & (1 << 0))
	{
		*EXTI_PR |= (1 << 0);  // Clear pending bit

		if (*GPIOA_IDR & (1 << 0))  // Nhả nút
			LedCtrl(Red_LED, 0);
		else                        // Nhấn nút
			LedCtrl(Red_LED, 1);

		Blink_Green_LED();
	}
}

int main()
{
	HAL_Init();
	LedInit();
	ButtonInit();

	while(1)
	{}
}
